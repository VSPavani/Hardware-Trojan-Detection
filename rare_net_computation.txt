import random

verilog_lines = [
"not NOT1_1 (N118, N1);",
"not NOT1_2 (N119, N4);",
"not NOT1_3 (N122, N11);",
"not NOT1_4 (N123, N17);",
"not NOT1_5 (N126, N24);",
"not NOT1_6 (N127, N30);",
"not NOT1_7 (N130, N37);",
"not NOT1_8 (N131, N43);",
"not NOT1_9 (N134, N50);",
"not NOT1_10 (N135, N56);",
"not NOT1_11 (N138, N63);",
"not NOT1_12 (N139, N69);",
"not NOT1_13 (N142, N76);",
"not NOT1_14 (N143, N82);",
"not NOT1_15 (N146, N89);",
"not NOT1_16 (N147, N95);",
"not NOT1_17 (N150, N102);",
"not NOT1_18 (N151, N108);",
"nand NAND2_19 (N154, N118, N4);",
"nor NOR2_20 (N157, N8, N119);",
"nor NOR2_21 (N158, N14, N119);",
"nand NAND2_22 (N159, N122, N17);",
"nand NAND2_23 (N162, N126, N30);",
"nand NAND2_24 (N165, N130, N43);",
"nand NAND2_25 (N168, N134, N56);",
"nand NAND2_26 (N171, N138, N69);",
"nand NAND2_27 (N174, N142, N82);",
"nand NAND2_28 (N177, N146, N95);",
"nand NAND2_29 (N180, N150, N108);",
"nor NOR2_30 (N183, N21, N123);",
"nor NOR2_31 (N184, N27, N123);",
"nor NOR2_32 (N185, N34, N127);",
"nor NOR2_33 (N186, N40, N127);",
"nor NOR2_34 (N187, N47, N131);",
"nor NOR2_35 (N188, N53, N131);",
"nor NOR2_36 (N189, N60, N135);",
"nor NOR2_37 (N190, N66, N135);",
"nor NOR2_38 (N191, N73, N139);",
"nor NOR2_39 (N192, N79, N139);",
"nor NOR2_40 (N193, N86, N143);",
"nor NOR2_41 (N194, N92, N143);",
"nor NOR2_42 (N195, N99, N147);",
"nor NOR2_43 (N196, N105, N147);",
"nor NOR2_44 (N197, N112, N151);",
"nor NOR2_45 (N198, N115, N151);",
"and AND9_46_1 (N199_0, N154, N159);",
"and AND9_46_2 (N199_1, N162, N165);",
"and AND9_46_3 (N199_2, N168, N171);",
"and AND9_46_4 (N199_3, N174, N177);",
"and AND9_46_5 (N199_4, N199_0, N199_1);",
"and AND9_46_6 (N199_5, N199_2, N199_3);",
"and AND9_46_7 (N199_6, N199_4, N199_5);",
"and AND9_46_8 (N199, N199_6, N180);",
"not NOT1_47 (N203, N199);",
"not NOT1_48 (N213, N199);",
"not NOT1_49 (N223, N199);",
"xor XOR2_50 (N224, N203, N154);",
"xor XOR2_51 (N227, N203, N159);",
"xor XOR2_52 (N230, N203, N162);",
"xor XOR2_53 (N233, N203, N165);",
"xor XOR2_54 (N236, N203, N168);",
"xor XOR2_55 (N239, N203, N171);",
"nand NAND2_56 (N242, N1, N213);",
"xor XOR2_57 (N243, N203, N174);",
"nand NAND2_58 (N246, N213, N11);",
"xor XOR2_59 (N247, N203, N177);",
"nand NAND2_60 (N250, N213, N24);",
"xor XOR2_61 (N251, N203, N180);",
"nand NAND2_62 (N254, N213, N37);",
"nand NAND2_63 (N255, N213, N50);",
"nand NAND2_64 (N256, N213, N63);",
"nand NAND2_65 (N257, N213, N76);",
"nand NAND2_66 (N258, N213, N89);",
"nand NAND2_67 (N259, N213, N102);",
"nand NAND2_68 (N260, N224, N157);",
"nand NAND2_69 (N263, N224, N158);",
"nand NAND2_70 (N264, N227, N183);",
"nand NAND2_71 (N267, N230, N185);",
"nand NAND2_72 (N270, N233, N187);",
"nand NAND2_73 (N273, N236, N189);",
"nand NAND2_74 (N276, N239, N191);",
"nand NAND2_75 (N279, N243, N193);",
"nand NAND2_76 (N282, N247, N195);",
"nand NAND2_77 (N285, N251, N197);",
"nand NAND2_78 (N288, N227, N184);",
"nand NAND2_79 (N289, N230, N186);",
"nand NAND2_80 (N290, N233, N188);",
"nand NAND2_81 (N291, N236, N190);",
"nand NAND2_82 (N292, N239, N192);",
"nand NAND2_83 (N293, N243, N194);",
"nand NAND2_84 (N294, N247, N196);",
"nand NAND2_85 (N295, N251, N198);",
"and AND9_86_0 (N296_0, N260, N264);",
"and AND9_86_1 (N296_1, N267, N270);",
"and AND9_86_2 (N296_2, N273, N276);",
"and AND9_86_3 (N296_3, N279, N282);",
"and AND9_86_4 (N296_4, N296_0, N296_1);",
"and AND9_86_5 (N296_5, N296_2, N296_3);",
"and AND9_86_6 (N296_6, N296_4, N296_5);",
"and AND9_86_7 (N296, N296_6, N285);",
"not NOT1_87 (N300, N263);",
"not NOT1_88 (N301, N288);",
"not NOT1_89 (N302, N289);",
"not NOT1_90 (N303, N290);",
"not NOT1_91 (N304, N291);",
"not NOT1_92 (N305, N292);",
"not NOT1_93 (N306, N293);",
"not NOT1_94 (N307, N294);",
"not NOT1_95 (N308, N295);",
"not NOT1_96 (N309, N296);",
"not NOT1_97 (N319, N296);",
"not NOT1_98 (N329, N296);",
"xor XOR2_99 (N330, N309, N260);",
"xor XOR2_100 (N331, N309, N264);",
"xor XOR2_101 (N332, N309, N267);",
"xor XOR2_102 (N333, N309, N270);",
"nand NAND2_103 (N334, N8, N319);",
"xor XOR2_104 (N335, N309, N273);",
"nand NAND2_105 (N336, N319, N21);",
"xor XOR2_106 (N337, N309, N276);",
"nand NAND2_107 (N338, N319, N34);",
"xor XOR2_108 (N339, N309, N279);",
"nand NAND2_109 (N340, N319, N47);",
"xor XOR2_110 (N341, N309, N282);",
"nand NAND2_111 (N342, N319, N60);",
"xor XOR2_112 (N343, N309, N285);",
"nand NAND2_113 (N344, N319, N73);",
"nand NAND2_114 (N345, N319, N86);",
"nand NAND2_115 (N346, N319, N99);",
"nand NAND2_116 (N347, N319, N112);",
"nand NAND2_117 (N348, N330, N300);",
"nand NAND2_118 (N349, N331, N301);",
"nand NAND2_119 (N350, N332, N302);",
"nand NAND2_120 (N351, N333, N303);",
"nand NAND2_121 (N352, N335, N304);",
"nand NAND2_122 (N353, N337, N305);",
"nand NAND2_123 (N354, N339, N306);",
"nand NAND2_124 (N355, N341, N307);",
"nand NAND2_125 (N356, N343, N308);",
"and AND9_126_0 (N357_0, N348, N349);",
"and AND9_126_1 (N357_1, N350, N351);",
"and AND9_126_2 (N357_2, N352, N353);",
"and AND9_126_3 (N357_3, N354, N355);",
"and AND9_126_4 (N357_4, N357_0, N357_1);",
"and AND9_126_5 (N357_5, N357_2, N357_3);",
"and AND9_126_6 (N357_6, N357_4, N357_5);",
"and AND9_126_7 (N357, N357_6, N356);",
"not NOT1_127 (N360, N357);",
"not NOT1_128 (N370, N357);",
"nand NAND2_129 (N371, N14, N360);",
"nand NAND2_130 (N372, N360, N27);",
"nand NAND2_131 (N373, N360, N40);",
"nand NAND2_132 (N374, N360, N53);",
"nand NAND2_133 (N375, N360, N66);",
"nand NAND2_134 (N376, N360, N79);",
"nand NAND2_135 (N377, N360, N92);",
"nand NAND2_136 (N378, N360, N105);",
"nand NAND2_137 (N379, N360, N115);",
"and AND4_138_0 (N380_0, N4, N242);",
"and AND4_138_1 (N380_1, N334, N371);",
"nand NAND_138_2 (N380, N380_1, N380_0);",
"and AND4_139_0 (N381_0, N246, N336);",
"and AND4_139_1 (N381_1, N372, N17);",
"nand NAND4_139 (N381, N381_0, N381_1);",
"and AND4_140_0 (N386_0, N250, N338);",
"and AND4_140_1 (N386_1, N373, N30);",
"nand NAND4_140 (N386, N386_0, N386_1);",
"and AND4_141_0 (N393_0, N254, N340);",
"and AND4_141_1 (N393_1, N374, N43);",
"nand NAND4_141 (N393, N393_0, N393_1);",
"and AND4_142_0 (N399_0, N255, N342);",
"and AND4_142_1 (N399_1, N375, N56);",
"nand NAND4_142 (N399, N399_0, N399_1);",
"and AND4_143_0 (N404_0, N256, N344);",
"and AND4_143_1 (N404_1, N376, N69);",
"nand NAND4_143 (N404, N404_0, N404_1);",
"and AND4_144_0 (N407_0, N257, N345);",
"and AND4_144_1 (N407_1, N377, N82);",
"nand NAND4_144 (N407, N407_0, N407_1);",
"and AND4_145_0 (N411_0, N258, N346);",
"and AND4_145_1 (N411_1, N378, N95);",
"nand NAND4_145 (N411, N411_0, N411_1);",
"and AND4_146_0 (N414_0, N259, N347);",
"and AND4_146_1 (N414_1, N379, N108);",
"nand NAND4_146 (N414, N414_0, N414_1);",
"not NOT1_147 (N415, N380);",
"and AND8_148_0 (N416_0, N381, N386);",
"and AND8_148_1 (N416_1, N393, N399);",
"and AND8_148_2 (N416_2, N404, N407);",
"and AND8_148_3 (N416_3, N411, N414);",
"and AND8_148_4 (N416_4, N416_0, N416_1);",
"and AND8_148_5 (N416_5, N416_2, N416_3);",
"and AND8_148_6 (N416, N416_4, N416_5);",
"not NOT1_149 (N417, N393);",
"not NOT1_150 (N418, N404);",
"not NOT1_151 (N419, N407);",
"not NOT1_152 (N420, N411);",
"nor NOR2_153 (N421, N415, N416);",
"nand NAND2_154 (N422, N386, N417);",
"and AND4_155_0 (N425_0, N393, N418);",
"and AND4_155_1 (N425_1, N399, N386);",
"nand NAND4_155 (N425, N425_0, N425_1);",
"and AND4_156_0 (N428_0, N393, N399);",
"nand NAND4_156 (N428, N428_0, N419);",
"and AND4_157_0 (N429_0, N386, N393);",
"and AND4_157_1 (N429_1, N407, N420);",
"nand NAND4_157 (N429, N429_0, N429_1);",
"and AND4_158_0 (N430_0, N381, N386);",
"and AND4_158_1 (N430_1, N422, N399);",
"nand NAND4_158 (N430, N430_0, N430_1);",
"and AND4_159_0 (N431_0, N381, N386);",
"and AND4_159_1 (N431_1, N425, N428);",
"nand NAND4_159 (N431, N431_0, N431_1);",
"and AND4_160_0 (N432_0, N381, N422);",
"and AND4_160_1 (N432_1, N425, N429);",
"nand NAND4_160 (N432, N432_0, N432_1);",
]

def convert_and_to_cnf(gate, output, input1, input2):
    # Variable indices for CNF
    output_index = int(output[1:])  # Assumes Nxxx format
    input1_index = int(input1[1:])
    input2_index = int(input2[1:])

    # CNF clauses for the AND gate
    if gate == 'and':
        cnf_clauses = [
            [-output_index, input1_index],  # ~Nxxx v input1
            [-output_index, input2_index],  # ~Nxxx v input2
            [-input1_index, -input2_index, output_index]  # ~input1 v ~input2 v Nxxx
        ]
    elif gate == 'nand':
        cnf_clauses = [
            [output_index, input1_index],  # Nxxx v ~input1
            [output_index, input2_index],  # Nxxx v ~input2
            [-output_index, -input1_index, -input2_index]  # ~Nxxx v input1 v input2
        ]
    elif gate == 'nor':
        cnf_clauses = [
            [-output_index, -input1_index],  # ~Nxxx v ~input1
            [-output_index, -input2_index],  # ~Nxxx v ~input2
            [output_index, input1_index, input2_index]  # Nxxx v input1 v input2
        ]
    elif gate == 'not':
        cnf_clauses = [
            [-output_index, input1_index],  # ~Nxxx v input1
            [output_index, -input1_index]  # Nxxx v ~input1
        ]
    elif gate == 'or':
        cnf_clauses = [
            [output_index, -input1_index],  # Nxxx v ~input1
            [output_index, -input2_index],  # Nxxx v ~input2
            [-output_index, input1_index, input2_index]  # ~Nxxx v input1 v input2
        ]
    elif gate == 'xor':
        cnf_clauses = [
            [-output_index, -input1_index, -input2_index],  # ~Nxxx v ~input1 v ~input2
            [-output_index, input1_index, input2_index],  # ~Nxxx v input1 v input2
            [output_index, -input1_index, input2_index],  # Nxxx v ~input1 v input2
            [output_index, input1_index, -input2_index]  # Nxxx v input1 v ~input2
        ]
    else:
        raise ValueError(f"Unsupported gate type: {gate}")

    return cnf_clauses

# Function to simulate the logic
cnf_circuit=[]
for line in verilog_lines:
    parts = line.split()
    gate=parts[0]
    output = parts[2][1:-1]  # Extract N545

    if(gate!='not'):
      input1 = parts[3][0:-1]
      input2 = parts[4][0:-2]
      cnf_circuit.extend(convert_and_to_cnf(gate,output,input1,input2))
    else:
      input1 = parts[3][0:-2]
      cnf_circuit.extend(convert_and_to_cnf(gate,output,input1,"00"))


# Define primary inputs
input_nodes = ["N1","N4","N8","N11","N14","N17","N21","N24","N27","N30",
             "N34","N37","N40","N43","N47","N50","N53","N56","N60","N63",
             "N66","N69","N73","N76","N79","N82","N86","N89","N92","N95",
             "N99","N102","N105","N108","N112","N115"]

def generate_random_patterns_with_coverage(input_nodes, num_patterns):
    patterns = []
    seen_patterns = set()
    while len(patterns) < num_patterns:
        pattern = tuple(random.randint(0, 1) for _ in input_nodes)
        if pattern not in seen_patterns:
            seen_patterns.add(pattern)
            patterns.append(dict(zip(input_nodes, pattern)))
    return patterns

# Generate random patterns
num_patterns = 3000
input_patterns = generate_random_patterns_with_coverage(input_nodes, num_patterns)

# Function to simulate the logic
def simulate_verilog(verilog_lines, primary_inputs):
    nodes = {}  # Dictionary to hold node values
    for prim in primary_inputs:
        nodes[prim]=primary_inputs.get(prim)
    for line in verilog_lines:

        parts = line.split()
        gate=parts[0]
        node_name = parts[2][1:-1]
        if(gate!='not'):
          input1_name = parts[3][0:-1]
          input2_name = parts[4][0:-2]
        else:
          input1_name = parts[3][0:-2]

        if(gate=='and'):
          nodes[node_name] = nodes[input1_name] and nodes[input2_name]
        if(gate=='or'):
          nodes[node_name] = nodes[input1_name] or nodes[input2_name]
        if(gate=='nor'):
          nodes[node_name] = not(nodes[input1_name] or nodes[input2_name])
        if(gate=='not'):
          nodes[node_name] = not(nodes[input1_name])
        if(gate=='xor'):
          nodes[node_name] = (nodes[input1_name] ^ nodes[input2_name])
        if(gate=='nand'):
          nodes[node_name] = not(nodes[input1_name] and nodes[input2_name])

    return nodes

class Gate:
    def __init__(self, name, cnt0, cnt1):
        self.name = name
        self.cnt0 = 0
        self.cnt1 = 0
        self.zero_patterns = []
        self.one_patterns = []

class RareNode:
  def __init__(self, name, rarevalue):
    self.name = name
    self.rarevalue = rarevalue
    self.occurence=0
    self.rarepattern = []

ctr=0
node_counts = {}
for idx, input_values in enumerate(input_patterns):
  node_values = simulate_verilog(verilog_lines, input_patterns[idx])
  for node, value in node_values.items():
    if(ctr>0):
      break
    else:
      node_counts[node]=Gate(node,0,0)
  ctr+=1
  for node, value in node_values.items():
      if value == 0:
           node_counts[node].cnt0 += 1
           node_counts[node].zero_patterns.append(input_patterns[idx])
      else:
           node_counts[node].cnt1 += 1
           node_counts[node].one_patterns.append(input_patterns[idx])

output_nodes=["N223","N329","N370","N421","N430","N431","N432"]

rare_nodes={}
for node, gate in node_counts.items():
  if(node not in input_nodes):
    if(node not in output_nodes):
      # print(f"Node {node}: count of 0s = {gate.cnt0}, count of 1s = {gate.cnt1}")
      rare_nodes[node]=RareNode(node,0)
      if(gate.cnt0>gate.cnt1):
        rare_nodes[node].rarevalue=True
        rare_nodes[node].rarepattern=node_counts[node].one_patterns
        rare_nodes[node].occurence=gate.cnt1
      else:
        rare_nodes[node].rarevalue=False
        rare_nodes[node].rarepattern=node_counts[node].zero_patterns
        rare_nodes[node].occurence=gate.cnt0

rare_nets = list(rare_nodes.keys())

rare_values1={}
for node in rare_nodes:
  rare_values1[node]=rare_nodes[node].rarevalue

print(rare_nets)
print(rare_values1)